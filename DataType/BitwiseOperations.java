//位运算学习

public class BitwiseOperations{
	public static void main(String[] args){
		int a = 1 >> 2; //1 向右位移2位
		int b = -1 >> 2;
		int c = 1 << 2; //1 向左位移2位
		int d = -1 << 2;
		int e = 3 >>> 2; //算术右移2位

		//1的原码：00000000 00000000 00000000 00000001 
		//1的补码：00000000 00000000 00000000 00000001 
		//右移后>>：00000000 00000000 00000000 00000000 ->0
		System.out.println("a = " + a);

		//-1的原码：10000000 00000000 00000000 00000001
		//-1的反码：11111111 11111111 11111111 11111110
		//-1的补码：11111111 11111111 11111111 11111111
		//右移后>>：11111111 11111111 11111111 11111111 
		//反码    ：11111111 11111111 11111111 11111110
		//原码    ：10000000 00000000 00000000 00000001 -> -1
		System.out.println("b = " + b);

		//1的原码：00000000 00000000 00000000 00000001
		//1的补码：00000000 00000000 00000000 00000001 
		//左移后>>：00000000 00000000 00000000 00000100 ->4
		System.out.println("c = " + c);

		//-1的原码：10000000 00000000 00000000 00000001
		//-1的反码：11111111 11111111 11111111 11111110
		//-1的补码：11111111 11111111 11111111 11111111
		//左移后>>：11111111 11111111 11111111 11111100 
		//反码    ：11111111 11111111 11111111 11111011
		//原码    ：10000000 00000000 00000000 00000100 -> -4
		System.out.println("d = " + d);

		//3的原码：00000000 00000000 00000000 00000011
		//1的补码：00000000 00000000 00000000 00000011 
		//右移后>>：00000000 00000000 00000000 00000000 ->0
		System.out.println("e = " + e);

		/*
			
			~-2=? //按位取反
			~2=? //按位取反
			2&3=？ //2按位与3
			2|3=?  //2按位或3
			~-5=？ //按位取反
			13&7=？ //按位与
			5|4=？  //按位或
			-3^3=?  //按位异或
			2^3=?   //按位异或
		*/

		//  -2的原码：   10000000 00000000 00000000 00000010
		//      反码：   11111111 11111111 11111111 11111101
		//      补码：   11111111 11111111 11111111 11111110
		//		取反：   00000000 00000000 00000000 00000001
		//  结果原码：   00000000 00000000 00000000 00000001 ->1
		System.out.println(~-2);

		//   2的原码：   00000000 00000000 00000000 00000010
		//      补码：   00000000 00000000 00000000 00000010
		//		取反：   11111111 11111111 11111111 11111101  运算后的补码
		//运算后的反码：  11111111 11111111 11111111 11111100
		//  结果原码：   10000000 00000000 00000000 00000011 -> -3
		System.out.println(~2);
 
		//   2的原码：   00000000 00000000 00000000 00000010
		//   2的补码：   00000000 00000000 00000000 00000010
		//   3的原码：   00000000 00000000 00000000 00000011
		//   3的补码：   00000000 00000000 00000000 00000011
		//     按位&：
		//   00000000 00000000 00000000 00000010
		//   00000000 00000000 00000000 00000011
		//   00000000 00000000 00000000 00000010  ->& 运算后的补码
		//   运算后的原码：00000000 00000000 00000000 00000010 -> 2
		System.out.println(2&3);

		//   2的原码：   00000000 00000000 00000000 00000010
		//   2的补码：   00000000 00000000 00000000 00000010
		//   3的原码：   00000000 00000000 00000000 00000011
		//   3的补码：   00000000 00000000 00000000 00000011
		//     按位|：
		//   00000000 00000000 00000000 00000010
		//   00000000 00000000 00000000 00000011
		//   00000000 00000000 00000000 00000011  ->& 运算后的补码
		//   运算后的原码：00000000 00000000 00000000 00000011 -> 3

		System.out.println(2|3);

		//  -5的原码：   10000000 00000000 00000000 00000101
		//      反码：   11111111 11111111 11111111 11111010
		//      补码：   11111111 11111111 11111111 11111011
		//		取反：   00000000 00000000 00000000 00000100
		//  结果原码：   00000000 00000000 00000000 00000100 ->4
		System.out.println(~-5);

		//   13的原码：   00000000 00000000 00000000 00001101
		//   13的补码：   00000000 00000000 00000000 00001101
		//   7的原码：    00000000 00000000 00000000 00000111
		//   7的补码：    00000000 00000000 00000000 00000111
		//     按位&：
		//   00000000 00000000 00000000 00001101
		//   00000000 00000000 00000000 00000111
		//   00000000 00000000 00000000 00000101  ->& 运算后的补码
		//   运算后的原码：00000000 00000000 00000000 00000101 -> 5
		System.out.println(13&7);

		//   5的原码：   00000000 00000000 00000000 00000101
		//   5的补码：   00000000 00000000 00000000 00000101
		//   4的原码：   00000000 00000000 00000000 00000100
		//   4的补码：   00000000 00000000 00000000 00000100
		//     按位|：
		//   00000000 00000000 00000000 00000101
		//   00000000 00000000 00000000 00000100
		//   00000000 00000000 00000000 00000101  ->& 运算后的补码
		//   运算后的原码：00000000 00000000 00000000 00000101 -> 5
		System.out.println(5|4);

		//  -3的原码：   10000000 00000000 00000000 00000011
		//  -3的反码：   11111111 11111111 11111111 11111100
		//  -3的补码：   11111111 11111111 11111111 11111101
		//   3的原码：   00000000 00000000 00000000 00000011
		//   3的补码：   00000000 00000000 00000000 00000011
		//     按位 ^：
		//     11111111 11111111 11111111 11111101
		//     00000000 00000000 00000000 00000011
		//     11111111 11111111 11111111 11111110 ->& 运算后的补码
		//反码：11111111 11111111 11111111 11111101
		//   运算后的原码：10000000 00000000 00000000 00000010 -> -2
		System.out.println(-3^3);

		//   2的原码：   00000000 00000000 00000000 00000010
		//   2的反码：   00000000 00000000 00000000 00000010
		//   3的原码：   00000000 00000000 00000000 00000011
		//   3的补码：   00000000 00000000 00000000 00000011
		//     按位 ^：
		//     00000000 00000000 00000000 00000010
		//     00000000 00000000 00000000 00000011
		//     00000000 00000000 00000000 00000001 ->& 运算后的补码
		//   运算后的原码：00000000 00000000 00000000 00000001 -> 1
		System.out.println(2^3);
	}
}